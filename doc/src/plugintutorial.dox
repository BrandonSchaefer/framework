/*! @page plugintutorial Plugin Tutorial 

@section intro Introduction

This page is a short tutorial about creating your own input method plugin.
MeeGo Touch Input Method provides a framework which developers can extend the functionality 
of the input method by providing a new input method user interface. The new input method is implemented as 
plugin.

This page shows some excerpts from MeeGo Keyboard source code.

@section skeleton Skeleton
There are two important parts in the plugin making: the user interface of the input method, which is the part that user interact with while inputting text; and the settings, which is the part that enables user to set preferences on the input method.


@subsection ui User interface
The UI is loaded and controlled by a MInputMethodBase class. 
@code
class MKeyboardHost: public MInputMethodBase
{
    Q_OBJECT

    public:
        MKeyboardHost(MInputContextConnection *icConnection, QObject *parent = 0);
            virtual ~MKeyboardHost();
    .....
@endcode

The MInputMethodBase itself needs to be loaded by the plugin class, which is a MInputMethodPlugin class.
@code
MInputMethodBase *
MKeyboardPlugin::createInputMethod(MInputContextConnection *icConnection)
{
    MInputMethodBase *inputMethod = new MKeyboardHost(icConnection);
    return inputMethod;
}
@endcode

The whole user interface is shown in an MSceneWindow. MWidget is used to create the actual user interface, and needs to be parented to the scene window.
The scene window is then put to the root element of the MPlainWindow which is provided in the input method server.
@code
sceneWindow = new MSceneWindow;
sceneWindow->setManagedManually(true); // we want the scene window to remain in origin
MPlainWindow::instance()->sceneManager()->appearSceneWindowNow(sceneWindow);
...
vkbWidget = new MVirtualKeyboard(LayoutsManager::instance(), vkbStyleContainer, sceneWindow);
@endcode

The interaction between the UI and the application is done by employing functions provided by MInputMethodBase.

@subsection settings Settings
Settings is basically a QGraphicsWidget which holds items to provide user to set some preferences or behaviour of the input method. It is displayed by input method server in a dialog and also displayed in the control panel of the system.

The settings is created by subclassing MInputMethodSettingsBase.
@code
/*!
 * \brief MKeyboardSettings is the implemetation of meego-keyboard setting.
 * MKeyboardSettings implement MInputMethodSettingsBase and create the meego-keyboard
 * setting. It provides below functionalities: get/set error corretion, get/set
 * installed (selected) keyboards.
 */
class MKeyboardSettings: public QObject, public MInputMethodSettingsBase
{
    Q_OBJECT

public:
    MKeyboardSettings();
    .....
@endcode

The actual widget shown is created in MKeyboardSettings::createContentWidget:
@code
QGraphicsWidget *MKeyboardSettings::createContentWidget(QGraphicsWidget *parent)
{
    // the pointer of returned QGraphicsWidget is owned by the caller,
    // so we just always create a new containerWidget.
    return new MKeyboardSettingsWidget(this, parent);
}
@endcode

Settings widget will appear in a dialog when you ask it by emitting MInputMethodBase::settingsRequested(). Usually, this is invoked when user presses a "Settings" button provided by the plugin.

<img alt="Settings Dialog" src="settings-dialog.png"></img>


@section compilation Compilation
To use the framework you need to add @c meegoimframework to @c CONFIG variable in your project file.
@code
CONFIG += meegoimframework
@endcode

@section installation Installation
The plugin is installed to @c /usr/lib/meego-im-plugins directory. Depending on the user interface type, the plugin can be activated programmaticaly by setting the handler GConf key to the name of the plugin. The GConf parent key is @c /meegotouch/inputmethods/plugins/handler.

During runtime the plugin can be selected from control panel on the system.

*/
