/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_m_dbus_glib_ic_connection_MARSHAL_H__
#define __dbus_glib_marshal_m_dbus_glib_ic_connection_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_char (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* BOOLEAN:INT,POINTER (/tmp/dbus-binding-tool-c-marshallers.EL9VHV:1) */
extern void dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_POINTER (GClosure     *closure,
                                                                              GValue       *return_value,
                                                                              guint         n_param_values,
                                                                              const GValue *param_values,
                                                                              gpointer      invocation_hint,
                                                                              gpointer      marshal_data);
void
dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_POINTER (GClosure     *closure,
                                                                  GValue       *return_value G_GNUC_UNUSED,
                                                                  guint         n_param_values,
                                                                  const GValue *param_values,
                                                                  gpointer      invocation_hint G_GNUC_UNUSED,
                                                                  gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__INT_POINTER) (gpointer     data1,
                                                         gint         arg_1,
                                                         gpointer     arg_2,
                                                         gpointer     data2);
  register GMarshalFunc_BOOLEAN__INT_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__INT_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_int (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:BOOLEAN,BOOLEAN,POINTER (/tmp/dbus-binding-tool-c-marshallers.EL9VHV:2) */
extern void dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__BOOLEAN_BOOLEAN_POINTER (GClosure     *closure,
                                                                                          GValue       *return_value,
                                                                                          guint         n_param_values,
                                                                                          const GValue *param_values,
                                                                                          gpointer      invocation_hint,
                                                                                          gpointer      marshal_data);
void
dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__BOOLEAN_BOOLEAN_POINTER (GClosure     *closure,
                                                                              GValue       *return_value G_GNUC_UNUSED,
                                                                              guint         n_param_values,
                                                                              const GValue *param_values,
                                                                              gpointer      invocation_hint G_GNUC_UNUSED,
                                                                              gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__BOOLEAN_BOOLEAN_POINTER) (gpointer     data1,
                                                                     gboolean     arg_1,
                                                                     gboolean     arg_2,
                                                                     gpointer     arg_3,
                                                                     gpointer     data2);
  register GMarshalFunc_BOOLEAN__BOOLEAN_BOOLEAN_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__BOOLEAN_BOOLEAN_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_boolean (param_values + 1),
                       g_marshal_value_peek_boolean (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER (/tmp/dbus-binding-tool-c-marshallers.EL9VHV:3) */
extern void dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__POINTER (GClosure     *closure,
                                                                          GValue       *return_value,
                                                                          guint         n_param_values,
                                                                          const GValue *param_values,
                                                                          gpointer      invocation_hint,
                                                                          gpointer      marshal_data);
void
dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__POINTER (GClosure     *closure,
                                                              GValue       *return_value G_GNUC_UNUSED,
                                                              guint         n_param_values,
                                                              const GValue *param_values,
                                                              gpointer      invocation_hint G_GNUC_UNUSED,
                                                              gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER) (gpointer     data1,
                                                     gpointer     arg_1,
                                                     gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 2);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:INT,INT,INT,STRING,BOOLEAN,INT,UINT,UINT,POINTER (/tmp/dbus-binding-tool-c-marshallers.EL9VHV:4) */
extern void dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_INT_INT_STRING_BOOLEAN_INT_UINT_UINT_POINTER (GClosure     *closure,
                                                                                                                   GValue       *return_value,
                                                                                                                   guint         n_param_values,
                                                                                                                   const GValue *param_values,
                                                                                                                   gpointer      invocation_hint,
                                                                                                                   gpointer      marshal_data);
void
dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_INT_INT_STRING_BOOLEAN_INT_UINT_UINT_POINTER (GClosure     *closure,
                                                                                                       GValue       *return_value G_GNUC_UNUSED,
                                                                                                       guint         n_param_values,
                                                                                                       const GValue *param_values,
                                                                                                       gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                                       gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__INT_INT_INT_STRING_BOOLEAN_INT_UINT_UINT_POINTER) (gpointer     data1,
                                                                                              gint         arg_1,
                                                                                              gint         arg_2,
                                                                                              gint         arg_3,
                                                                                              gpointer     arg_4,
                                                                                              gboolean     arg_5,
                                                                                              gint         arg_6,
                                                                                              guint        arg_7,
                                                                                              guint        arg_8,
                                                                                              gpointer     arg_9,
                                                                                              gpointer     data2);
  register GMarshalFunc_BOOLEAN__INT_INT_INT_STRING_BOOLEAN_INT_UINT_UINT_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 10);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__INT_INT_INT_STRING_BOOLEAN_INT_UINT_UINT_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_int (param_values + 1),
                       g_marshal_value_peek_int (param_values + 2),
                       g_marshal_value_peek_int (param_values + 3),
                       g_marshal_value_peek_string (param_values + 4),
                       g_marshal_value_peek_boolean (param_values + 5),
                       g_marshal_value_peek_int (param_values + 6),
                       g_marshal_value_peek_uint (param_values + 7),
                       g_marshal_value_peek_uint (param_values + 8),
                       g_marshal_value_peek_pointer (param_values + 9),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:INT,INT,INT,INT,INT,INT,POINTER (/tmp/dbus-binding-tool-c-marshallers.EL9VHV:5) */
extern void dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_INT_INT_INT_INT_INT_POINTER (GClosure     *closure,
                                                                                                  GValue       *return_value,
                                                                                                  guint         n_param_values,
                                                                                                  const GValue *param_values,
                                                                                                  gpointer      invocation_hint,
                                                                                                  gpointer      marshal_data);
void
dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_INT_INT_INT_INT_INT_POINTER (GClosure     *closure,
                                                                                      GValue       *return_value G_GNUC_UNUSED,
                                                                                      guint         n_param_values,
                                                                                      const GValue *param_values,
                                                                                      gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                      gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__INT_INT_INT_INT_INT_INT_POINTER) (gpointer     data1,
                                                                             gint         arg_1,
                                                                             gint         arg_2,
                                                                             gint         arg_3,
                                                                             gint         arg_4,
                                                                             gint         arg_5,
                                                                             gint         arg_6,
                                                                             gpointer     arg_7,
                                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__INT_INT_INT_INT_INT_INT_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 8);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__INT_INT_INT_INT_INT_INT_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_int (param_values + 1),
                       g_marshal_value_peek_int (param_values + 2),
                       g_marshal_value_peek_int (param_values + 3),
                       g_marshal_value_peek_int (param_values + 4),
                       g_marshal_value_peek_int (param_values + 5),
                       g_marshal_value_peek_int (param_values + 6),
                       g_marshal_value_peek_pointer (param_values + 7),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:BOXED,BOOLEAN,POINTER (/tmp/dbus-binding-tool-c-marshallers.EL9VHV:6) */
extern void dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__BOXED_BOOLEAN_POINTER (GClosure     *closure,
                                                                                        GValue       *return_value,
                                                                                        guint         n_param_values,
                                                                                        const GValue *param_values,
                                                                                        gpointer      invocation_hint,
                                                                                        gpointer      marshal_data);
void
dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__BOXED_BOOLEAN_POINTER (GClosure     *closure,
                                                                            GValue       *return_value G_GNUC_UNUSED,
                                                                            guint         n_param_values,
                                                                            const GValue *param_values,
                                                                            gpointer      invocation_hint G_GNUC_UNUSED,
                                                                            gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__BOXED_BOOLEAN_POINTER) (gpointer     data1,
                                                                   gpointer     arg_1,
                                                                   gboolean     arg_2,
                                                                   gpointer     arg_3,
                                                                   gpointer     data2);
  register GMarshalFunc_BOOLEAN__BOXED_BOOLEAN_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__BOXED_BOOLEAN_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_boxed (param_values + 1),
                       g_marshal_value_peek_boolean (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:INT,STRING,STRING,BOXED,POINTER (/tmp/dbus-binding-tool-c-marshallers.EL9VHV:7) */
extern void dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_STRING_STRING_BOXED_POINTER (GClosure     *closure,
                                                                                                  GValue       *return_value,
                                                                                                  guint         n_param_values,
                                                                                                  const GValue *param_values,
                                                                                                  gpointer      invocation_hint,
                                                                                                  gpointer      marshal_data);
void
dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_STRING_STRING_BOXED_POINTER (GClosure     *closure,
                                                                                      GValue       *return_value G_GNUC_UNUSED,
                                                                                      guint         n_param_values,
                                                                                      const GValue *param_values,
                                                                                      gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                      gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__INT_STRING_STRING_BOXED_POINTER) (gpointer     data1,
                                                                             gint         arg_1,
                                                                             gpointer     arg_2,
                                                                             gpointer     arg_3,
                                                                             gpointer     arg_4,
                                                                             gpointer     arg_5,
                                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__INT_STRING_STRING_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__INT_STRING_STRING_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_int (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_boxed (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:INT,STRING,POINTER (/tmp/dbus-binding-tool-c-marshallers.EL9VHV:8) */
extern void dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_STRING_POINTER (GClosure     *closure,
                                                                                     GValue       *return_value,
                                                                                     guint         n_param_values,
                                                                                     const GValue *param_values,
                                                                                     gpointer      invocation_hint,
                                                                                     gpointer      marshal_data);
void
dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_STRING_POINTER (GClosure     *closure,
                                                                         GValue       *return_value G_GNUC_UNUSED,
                                                                         guint         n_param_values,
                                                                         const GValue *param_values,
                                                                         gpointer      invocation_hint G_GNUC_UNUSED,
                                                                         gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__INT_STRING_POINTER) (gpointer     data1,
                                                                gint         arg_1,
                                                                gpointer     arg_2,
                                                                gpointer     arg_3,
                                                                gpointer     data2);
  register GMarshalFunc_BOOLEAN__INT_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__INT_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_int (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,POINTER (/tmp/dbus-binding-tool-c-marshallers.EL9VHV:9) */
extern void dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__STRING_POINTER (GClosure     *closure,
                                                                                 GValue       *return_value,
                                                                                 guint         n_param_values,
                                                                                 const GValue *param_values,
                                                                                 gpointer      invocation_hint,
                                                                                 gpointer      marshal_data);
void
dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__STRING_POINTER (GClosure     *closure,
                                                                     GValue       *return_value G_GNUC_UNUSED,
                                                                     guint         n_param_values,
                                                                     const GValue *param_values,
                                                                     gpointer      invocation_hint G_GNUC_UNUSED,
                                                                     gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_POINTER) (gpointer     data1,
                                                            gpointer     arg_1,
                                                            gpointer     arg_2,
                                                            gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

G_END_DECLS

#endif /* __dbus_glib_marshal_m_dbus_glib_ic_connection_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_m_dbus_glib_ic_connection_methods[] = {
  { (GCallback) m_dbus_glib_ic_connection_activate_context, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__POINTER, 0 },
  { (GCallback) m_dbus_glib_ic_connection_show_input_method, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__POINTER, 51 },
  { (GCallback) m_dbus_glib_ic_connection_hide_input_method, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__POINTER, 102 },
  { (GCallback) m_dbus_glib_ic_connection_mouse_clicked_on_preedit, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_INT_INT_INT_INT_INT_POINTER, 153 },
  { (GCallback) m_dbus_glib_ic_connection_set_preedit, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__STRING_POINTER, 264 },
  { (GCallback) m_dbus_glib_ic_connection_update_widget_information, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__BOXED_BOOLEAN_POINTER, 319 },
  { (GCallback) m_dbus_glib_ic_connection_reset, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__POINTER, 397 },
  { (GCallback) m_dbus_glib_ic_connection_app_orientation_changed, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_POINTER, 438 },
  { (GCallback) m_dbus_glib_ic_connection_set_copy_paste_state, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__BOOLEAN_BOOLEAN_POINTER, 504 },
  { (GCallback) m_dbus_glib_ic_connection_process_key_event, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_INT_INT_STRING_BOOLEAN_INT_UINT_UINT_POINTER, 575 },
  { (GCallback) m_dbus_glib_ic_connection_register_toolbar, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_STRING_POINTER, 698 },
  { (GCallback) m_dbus_glib_ic_connection_unregister_toolbar, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_POINTER, 767 },
  { (GCallback) m_dbus_glib_ic_connection_set_toolbar_item_attribute, dbus_glib_marshal_m_dbus_glib_ic_connection_BOOLEAN__INT_STRING_STRING_BOXED_POINTER, 829 },
};

const DBusGObjectInfo dbus_glib_m_dbus_glib_ic_connection_object_info = {
  0,
  dbus_glib_m_dbus_glib_ic_connection_methods,
  13,
"com.meego.inputmethod.uiserver1\0activateContext\0S\0\0com.meego.inputmethod.uiserver1\0showInputMethod\0S\0\0com.meego.inputmethod.uiserver1\0hideInputMethod\0S\0\0com.meego.inputmethod.uiserver1\0mouseClickedOnPreedit\0S\0arg0\0I\0i\0arg1\0I\0i\0arg2\0I\0i\0arg3\0I\0i\0arg4\0I\0i\0arg5\0I\0i\0\0com.meego.inputmethod.uiserver1\0setPreedit\0S\0arg0\0I\0s\0\0com.meego.inputmethod.uiserver1\0updateWidgetInformation\0S\0arg0\0I\0ay\0arg1\0I\0b\0\0com.meego.inputmethod.uiserver1\0reset\0S\0\0com.meego.inputmethod.uiserver1\0appOrientationChanged\0S\0arg0\0I\0i\0\0com.meego.inputmethod.uiserver1\0setCopyPasteState\0S\0arg0\0I\0b\0arg1\0I\0b\0\0com.meego.inputmethod.uiserver1\0processKeyEvent\0S\0arg0\0I\0i\0arg1\0I\0i\0arg2\0I\0i\0arg3\0I\0s\0arg4\0I\0b\0arg5\0I\0i\0arg6\0I\0u\0arg7\0I\0u\0\0com.meego.inputmethod.uiserver1\0registerToolbar\0S\0arg0\0I\0i\0arg1\0I\0s\0\0com.meego.inputmethod.uiserver1\0unregisterToolbar\0S\0arg0\0I\0i\0\0com.meego.inputmethod.uiserver1\0setToolbarItemAttribute\0S\0arg0\0I\0i\0arg1\0I\0s\0arg2\0I\0s\0arg3\0I\0ay\0\0\0",
"\0",
"\0"
};

